// Code generated by cmd/generate_setting/main.go. DO NOT EDIT.

package models

import (
	"encoding/json"
	"strconv"

	"gorm.io/gorm"
)

// 常量定义
const (
	SettingDictKeyMultipleStreamThreadCount = "multiple_stream_thread_count"
	SettingDictKeyMultipleStreamChunkSize   = "multiple_stream_chunk_size"
	SettingDictKeyStrmFileEnable            = "strm_file_enable"
	SettingDictKeyStrmSupportFileExtList    = "strm_support_file_ext_list"
	SettingDictKeyLinkFileAutoDelete        = "link_file_auto_delete"
	SettingDictKeyStrmBaseURL               = "strm_base_url"
)

// 默认值定义
const (
	DefaultMultipleStreamThreadCount = 6
	DefaultMultipleStreamChunkSize   = 4194304
	DefaultStrmFileEnable            = false
	DefaultLinkFileAutoDelete        = true
	DefaultStrmBaseURL               = ""
)

var (
	DefaultStrmSupportFileExtList = []string{"mp4", "mkv", "avi", "mov", "wmv", "flv", "webm", "m4v", "mpg", "mpeg", "m2v", "m4p", "m4b", "ts", "mts", "m2ts", "m2t", "mxf", "dv", "dvr-ms", "asf", "3gp", "3g2", "f4v", "f4p", "f4a", "f4b", "vob", "ogv", "ogg", "divx", "xvid", "rm", "rmvb", "dat", "nsv", "qt", "amv", "mpv", "m1v", "svi", "viv", "fli", "flc"}
)

// 生成的 Get/Set 方法

func (s *SettingDict) GetMultipleStreamThreadCount(db *gorm.DB) int {
	value, err := s.query(db, SettingDictKeyMultipleStreamThreadCount)
	if err != nil {
		return DefaultMultipleStreamThreadCount
	}
	var v int64

	if v, err = strconv.ParseInt(value, 10, 64); err != nil {
		return DefaultMultipleStreamThreadCount
	}

	return int(v)
}

func (s *SettingDict) SetMultipleStreamThreadCount(db *gorm.DB, value int) *gorm.DB {
	return s.store(db, SettingDictKeyMultipleStreamThreadCount, strconv.FormatInt(int64(value), 10), "int")
}

func (s *SettingDict) GetMultipleStreamChunkSize(db *gorm.DB) int64 {
	value, err := s.query(db, SettingDictKeyMultipleStreamChunkSize)
	if err != nil {
		return DefaultMultipleStreamChunkSize
	}
	var v int64

	if v, err = strconv.ParseInt(value, 10, 64); err != nil {
		return DefaultMultipleStreamChunkSize
	}

	return v
}

func (s *SettingDict) SetMultipleStreamChunkSize(db *gorm.DB, value int64) *gorm.DB {
	return s.store(db, SettingDictKeyMultipleStreamChunkSize, strconv.FormatInt(value, 10), "int64")
}

func (s *SettingDict) GetStrmFileEnable(db *gorm.DB) bool {
	value, err := s.query(db, SettingDictKeyStrmFileEnable)
	if err != nil {
		return DefaultStrmFileEnable
	}
	var v bool

	if v, err = strconv.ParseBool(value); err != nil {
		return DefaultStrmFileEnable
	}

	return v
}

func (s *SettingDict) SetStrmFileEnable(db *gorm.DB, value bool) *gorm.DB {
	return s.store(db, SettingDictKeyStrmFileEnable, strconv.FormatBool(value), "bool")
}

func (s *SettingDict) GetStrmSupportFileExtList(db *gorm.DB) []string {
	value, err := s.query(db, SettingDictKeyStrmSupportFileExtList)
	if err != nil {
		return DefaultStrmSupportFileExtList
	}
	var v []string

	if err = json.Unmarshal([]byte(value), &v); err != nil {
		return DefaultStrmSupportFileExtList
	}

	return v
}

func (s *SettingDict) SetStrmSupportFileExtList(db *gorm.DB, value []string) *gorm.DB {
	b, _ := json.Marshal(value)

	return s.store(db, SettingDictKeyStrmSupportFileExtList, string(b), "json")
}

func (s *SettingDict) GetLinkFileAutoDelete(db *gorm.DB) bool {
	value, err := s.query(db, SettingDictKeyLinkFileAutoDelete)
	if err != nil {
		return DefaultLinkFileAutoDelete
	}
	var v bool

	if v, err = strconv.ParseBool(value); err != nil {
		return DefaultLinkFileAutoDelete
	}

	return v
}

func (s *SettingDict) SetLinkFileAutoDelete(db *gorm.DB, value bool) *gorm.DB {
	return s.store(db, SettingDictKeyLinkFileAutoDelete, strconv.FormatBool(value), "bool")
}

func (s *SettingDict) GetStrmBaseURL(db *gorm.DB) string {
	value, err := s.query(db, SettingDictKeyStrmBaseURL)
	if err != nil {
		return DefaultStrmBaseURL
	}
	return value
}

func (s *SettingDict) SetStrmBaseURL(db *gorm.DB, value string) *gorm.DB {
	return s.store(db, SettingDictKeyStrmBaseURL, value, "string")
}
