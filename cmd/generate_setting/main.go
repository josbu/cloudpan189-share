//go:build ignore

package main

import (
	"fmt"
	"os"
	"text/template"

	"github.com/xxcheng123/cloudpan189-share/internal/models"
)

const settingDictTemplate = `// Code generated by cmd/generate_setting/main.go. DO NOT EDIT.

package models

import (
	"encoding/json"
	"strconv"

	"gorm.io/gorm"
)

// 常量定义
const (
{{- range .Items }}
	SettingDictKey{{ .MethodSuffix }} = "{{ .Key }}"
{{- end }}
)

// 默认值定义
const (
{{- range .Items }}
{{- if eq .Type "int" }}
	Default{{ .MethodSuffix }} = {{ .DefaultValue }}
{{- else if eq .Type "int64" }}
	Default{{ .MethodSuffix }} = {{ .DefaultValue }}
{{- else if eq .Type "bool" }}
	Default{{ .MethodSuffix }} = {{ .DefaultValue }}
{{- else if eq .Type "string" }}
	Default{{ .MethodSuffix }} = "{{ .DefaultValue }}"
{{- end }}
{{- end }}
)

{{- range .Items }}
{{- if eq .Type "json" }}
var (
	Default{{ .MethodSuffix }} = {{ printf "%#v" .DefaultValue }}
)
{{- end }}
{{- end }}

// 生成的 Get/Set 方法
{{- range .Items }}

func (s *SettingDict) Get{{ .MethodSuffix }}(db *gorm.DB) {{ .GoType }} {
	value, err := s.query(db, SettingDictKey{{ .MethodSuffix }})
	if err != nil {
		return Default{{ .MethodSuffix }}
	}

{{- if eq .Type "int" }}
	var v int64

	if v, err = strconv.ParseInt(value, 10, 64); err != nil {
		return Default{{ .MethodSuffix }}
	}

	return int(v)
{{- else if eq .Type "int64" }}
	var v int64

	if v, err = strconv.ParseInt(value, 10, 64); err != nil {
		return Default{{ .MethodSuffix }}
	}

	return v
{{- else if eq .Type "bool" }}
	var v bool

	if v, err = strconv.ParseBool(value); err != nil {
		return Default{{ .MethodSuffix }}
	}

	return v
{{- else if eq .Type "string" }}
	return value
{{- else if eq .Type "json" }}
	var v {{ .GoType }}

	if err = json.Unmarshal([]byte(value), &v); err != nil {
		return Default{{ .MethodSuffix }}
	}

	return v
{{- end }}
}

func (s *SettingDict) Set{{ .MethodSuffix }}(db *gorm.DB, value {{ .GoType }}) *gorm.DB {
{{- if eq .Type "int" }}
	return s.store(db, SettingDictKey{{ .MethodSuffix }}, strconv.FormatInt(int64(value), 10), "int")
{{- else if eq .Type "int64" }}
	return s.store(db, SettingDictKey{{ .MethodSuffix }}, strconv.FormatInt(value, 10), "int64")
{{- else if eq .Type "bool" }}
	return s.store(db, SettingDictKey{{ .MethodSuffix }}, strconv.FormatBool(value), "bool")
{{- else if eq .Type "string" }}
	return s.store(db, SettingDictKey{{ .MethodSuffix }}, value, "string")
{{- else if eq .Type "json" }}
	b, _ := json.Marshal(value)

	return s.store(db, SettingDictKey{{ .MethodSuffix }}, string(b), "json")
{{- end }}
}
{{- end }}
`

const sharedSettingTemplate = `// Code generated by cmd/generate_setting/main.go. DO NOT EDIT.

package shared

import "github.com/xxcheng123/cloudpan189-share/internal/models"

var (
{{- range .Items }}
	{{ .MethodSuffix }} {{ .GoType }} = models.Default{{ .MethodSuffix }}
{{- end }}
)
`

const configInitTemplate = `// Code generated by cmd/generate_setting/main.go. DO NOT EDIT.

package configs

import (
	"github.com/xxcheng123/cloudpan189-share/internal/models"
	"github.com/xxcheng123/cloudpan189-share/internal/shared"
)

// LoadSettingDicts 加载设置字典到 shared 变量
func LoadSettingDicts(dicts []*models.SettingDict) {
	for _, dict := range dicts {
		switch dict.Key {
{{- range .Items }}
		case models.SettingDictKey{{ .MethodSuffix }}:
{{- if eq .Type "int" }}
			shared.{{ .MethodSuffix }} = dict.Value.Int()
{{- else if eq .Type "int64" }}
			shared.{{ .MethodSuffix }} = dict.Value.Int64()
{{- else if eq .Type "bool" }}
			shared.{{ .MethodSuffix }} = dict.Value.Bool()
{{- else if eq .Type "string" }}
			shared.{{ .MethodSuffix }} = dict.Value.Value()
{{- else if eq .Type "json" }}
			shared.{{ .MethodSuffix }} = dict.Value.StringSlice()
{{- end }}
{{- end }}
		}
	}
}
`

const settingServiceTemplate = `// Code generated by cmd/generate_setting/main.go. DO NOT EDIT.

package setting

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/xxcheng123/cloudpan189-share/internal/models"
	"github.com/xxcheng123/cloudpan189-share/internal/shared"
)

type getResponse struct {
	*models.Setting
	RunTimes int64 ` + "`" + `json:"runTimes"` + "`" + ` // 已经运行的时间
{{- range .Items }}
	{{ .MethodSuffix }} {{ .GoType }} ` + "`" + `json:"{{ .JsonTag }}"` + "`" + `
{{- end }}
}

func (s *service) Get() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		ctx.JSON(http.StatusOK, &getResponse{
			Setting:  shared.Setting,
			RunTimes: time.Now().Unix() - s.starTime.Unix(),
{{- range .Items }}
			{{ .MethodSuffix }}: shared.{{ .MethodSuffix }},
{{- end }}
		})
	}
}
`

type TemplateData struct {
	Items []TemplateItem
}

type TemplateItem struct {
	Key          string
	Type         string
	DefaultValue interface{}
	MethodSuffix string
	GoType       string
	JsonTag      string
}

func main() {
	// 转换配置为模板数据
	var templateData TemplateData
	for _, item := range models.SettingItems {
		templateItem := TemplateItem{
			Key:          item.Key,
			Type:         item.Type,
			DefaultValue: item.DefaultValue,
			MethodSuffix: item.MethodSuffix,
		}

		// 设置 Go 类型和 JSON 标签
		switch item.Type {
		case "int":
			templateItem.GoType = "int"
		case "int64":
			templateItem.GoType = "int64"
		case "bool":
			templateItem.GoType = "bool"
		case "string":
			templateItem.GoType = "string"
		case "json":
			templateItem.GoType = "[]string" // 假设 JSON 类型都是字符串数组
		}

		// 生成 JSON 标签（将 MethodSuffix 转换为 camelCase）
		templateItem.JsonTag = toCamelCase(item.MethodSuffix)

		templateData.Items = append(templateData.Items, templateItem)
	}

	// 解析模板
	tmpl, err := template.New("setting_dict").Parse(settingDictTemplate)
	if err != nil {
		panic(err)
	}

	// 生成 SettingDict 文件
	dictFile, err := os.Create("internal/models/setting_dict_generated.go")
	if err != nil {
		panic(err)
	}
	defer dictFile.Close()

	// 执行 SettingDict 模板
	if err := tmpl.Execute(dictFile, templateData); err != nil {
		panic(err)
	}

	fmt.Println("Generated internal/models/setting_dict_generated.go")

	// 生成 shared/setting 文件
	sharedTmpl, err := template.New("shared_setting").Parse(sharedSettingTemplate)
	if err != nil {
		panic(err)
	}

	sharedFile, err := os.Create("internal/shared/setting_generated.go")
	if err != nil {
		panic(err)
	}
	defer sharedFile.Close()

	// 执行 shared setting 模板
	if err := sharedTmpl.Execute(sharedFile, templateData); err != nil {
		panic(err)
	}

	fmt.Println("Generated internal/shared/setting_generated.go")

	// 生成 configs/init 文件
	configTmpl, err := template.New("config_init").Parse(configInitTemplate)
	if err != nil {
		panic(err)
	}

	configFile, err := os.Create("configs/init_generated.go")
	if err != nil {
		panic(err)
	}
	defer configFile.Close()

	// 执行 config init 模板
	if err := configTmpl.Execute(configFile, templateData); err != nil {
		panic(err)
	}

	fmt.Println("Generated configs/init_generated.go")

	// 生成 setting service 文件
	serviceTmpl, err := template.New("setting_service").Parse(settingServiceTemplate)
	if err != nil {
		panic(err)
	}

	serviceFile, err := os.Create("internal/services/setting/service_get_generated.go")
	if err != nil {
		panic(err)
	}
	defer serviceFile.Close()

	// 执行 setting service 模板
	if err := serviceTmpl.Execute(serviceFile, templateData); err != nil {
		panic(err)
	}

	fmt.Println("Generated internal/services/setting/service_get_generated.go")
}

// toCamelCase 将 PascalCase 转换为 camelCase
func toCamelCase(s string) string {
	if len(s) == 0 {
		return s
	}
	
	// 将第一个字符转换为小写
	runes := []rune(s)
	runes[0] = runes[0] + 32 // 转换为小写
	return string(runes)
}
